{"componentChunkName":"component---src-templates-blog-post-js","path":"/useMediaQuery/","result":{"data":{"site":{"siteMetadata":{"title":"ReactJS para impacientes"}},"markdownRemark":{"id":"b1c0286f-118e-5b07-8e8f-702f4a88976e","excerpt":"A hook that returns a value based on a media query. Check if  and  exist, return  if not. Use  to match the given , cast its  property to a boolean and store in…","html":"<p>A hook that returns a value based on a media query.</p>\n<ul>\n<li>Check if <code class=\"language-text\">window</code> and <code class=\"language-text\">window.matchMedia</code> exist, return <code class=\"language-text\">whenFalse</code> if not.</li>\n<li>Use <code class=\"language-text\">window.matchMedia()</code> to match the given <code class=\"language-text\">query</code>, cast its <code class=\"language-text\">matches</code> property to a boolean and store in a state variable, <code class=\"language-text\">match</code>, using <code class=\"language-text\">React.useState()</code>.</li>\n<li>Use <code class=\"language-text\">React.useEffect()</code> to add a listener for changes and to clean up the listeners after the hook is destroyed.</li>\n<li>Return either <code class=\"language-text\">whenTrue</code> or <code class=\"language-text\">whenFalse</code> based on the value of <code class=\"language-text\">match</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useMediaQuery</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">query<span class=\"token punctuation\">,</span> whenTrue<span class=\"token punctuation\">,</span> whenFalse</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> window <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> window<span class=\"token punctuation\">.</span>matchMedia <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> whenFalse<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">const</span> mediaQuery <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">matchMedia</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>match<span class=\"token punctuation\">,</span> setMatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>mediaQuery<span class=\"token punctuation\">.</span>matches<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>    \n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setMatch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>mediaQuery<span class=\"token punctuation\">.</span>matches<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mediaQuery<span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> mediaQuery<span class=\"token punctuation\">.</span><span class=\"token function\">removeListener</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> match <span class=\"token operator\">?</span> whenTrue <span class=\"token punctuation\">:</span> whenFalse<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-jsx line-numbers\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ResponsiveText</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token function\">useMediaQuery</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'(max-width: 400px)'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Less than 400px wide'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'More than 400px wide'</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ResponsiveText</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><a href=\"http://github.com/30-seconds/\">Acesse a Referência original</a></p>","frontmatter":{"title":"React JS como usar o useMediaQuery","date":"January 04, 2020","description":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/useMediaQuery/","previous":{"fields":{"slug":"/useNavigatorOnLine/"},"frontmatter":{"title":"React JS como usar o useNavigatorOnLine"}},"next":{"fields":{"slug":"/useInterval/"},"frontmatter":{"title":"React JS como usar o useInterval"}}}}}